name: 🚀 Auto Release with Conventional Commits

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
          - prerelease

jobs:
  auto-release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install standard-version
        run: npm install -g standard-version

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Generate release with standard-version
        run: |
          # Use .versionrc configuration for release
          case "${{ github.event.inputs.release_type }}" in
            "major")
              standard-version --release-as major
              ;;
            "minor")
              standard-version --release-as minor
              ;;
            "patch")
              standard-version --release-as patch
              ;;
            "prerelease")
              standard-version --prerelease
              ;;
            *)
              standard-version
              ;;
          esac

      - name: Get new version
        id: version
        run: |
          VERSION=$(git describe --tags --abbrev=0)
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_num=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Push changes and tags
        run: |
          git push --follow-tags origin develop

      - name: Extract release notes from CHANGELOG
        id: release_notes
        run: |
          VERSION_NUM="${{ steps.version.outputs.version_num }}"
          
          # Create comprehensive release notes using our enhanced format
          cat > release_notes.md << 'NOTES_EOF'
          ## 🚀 What's New in TiLoKit ${{ steps.version.outputs.version }}
          
          NOTES_EOF
          
          # Extract and format changelog sections with emojis
          awk '/^## \['"$VERSION_NUM"'\]/, /^## \[/ {
            if (/^## \['"$VERSION_NUM"'\]/) {
              next
            }
            if (/^## \[/ && !/^## \['"$VERSION_NUM"'\]/) {
              exit
            }
            print
          }' CHANGELOG.md | while IFS= read -r line; do
            case "$line" in
              "### Added" | "### ✨ New Features")
                echo "## ✨ New Features" >> release_notes.md
                ;;
              "### Fixed" | "### 🐛 Bug Fixes")
                echo "" >> release_notes.md
                echo "## 🐛 Bug Fixes" >> release_notes.md
                ;;
              "### Changed" | "### ♻️ Code Refactoring")
                echo "" >> release_notes.md
                echo "## ♻️ Improvements" >> release_notes.md
                ;;
              "### Performance" | "### ⚡ Performance Improvements")
                echo "" >> release_notes.md
                echo "## ⚡ Performance" >> release_notes.md
                ;;
              "### Documentation" | "### 📚 Documentation")
                echo "" >> release_notes.md
                echo "## 📚 Documentation" >> release_notes.md
                ;;
              "")
                # Skip empty lines after headers
                ;;
              *)
                if [[ "$line" =~ ^- ]]; then
                  echo "$line" >> release_notes.md
                fi
                ;;
            esac
          done
          
          # Add installation instructions
          cat >> release_notes.md << 'INSTALL_EOF'
          
          ## 📦 Installation & Upgrade
          
          ### Fresh Installation
          ```bash
          curl -fsSL https://tienld-0801.github.io/tilokit/install.sh | bash
          ```
          
          ### Upgrade from Previous Version
          ```bash
          # Download and replace existing binary
          curl -fsSL https://tienld-0801.github.io/tilokit/install.sh | bash
          
          # Verify installation
          tilokit version
          ```
          
          ### Manual Download
          Download the appropriate binary for your platform from the assets below.
          
          ## 🔗 Links
          - 📚 [Documentation](https://github.com/tienld-0801/tilokit#readme)
          - 🐛 [Report Issues](https://github.com/tienld-0801/tilokit/issues)
          - 💬 [Discussions](https://github.com/tienld-0801/tilokit/discussions)
          
          ---
          
          **Full Changelog**: https://github.com/tienld-0801/tilokit/compare/v0.1.1-dev...${{ steps.version.outputs.version }}
          INSTALL_EOF
          
          # Save to GitHub output
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_OUTPUT
          cat release_notes.md >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.version }}
          release_name: 🚀 TiLoKit ${{ steps.version.outputs.version }}
          body: ${{ steps.release_notes.outputs.RELEASE_NOTES }}
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}

      - name: Trigger release workflow
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'release.yml',
              ref: '${{ steps.version.outputs.version }}'
            });
