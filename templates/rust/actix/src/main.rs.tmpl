use actix_web::{web, App, HttpResponse, HttpServer, Result, middleware::Logger};
use actix_cors::Cors;
use serde::{Deserialize, Serialize};

#[derive(Serialize)]
struct HealthResponse {
    status: String,
    service: String,
}

#[derive(Serialize)]
struct ApiResponse {
    message: String,
    version: String,
}

async fn health() -> Result<HttpResponse> {
    Ok(HttpResponse::Ok().json(HealthResponse {
        status: "ok".to_string(),
        service: "{{.ProjectName}}".to_string(),
    }))
}

async fn api_root() -> Result<HttpResponse> {
    Ok(HttpResponse::Ok().json(ApiResponse {
        message: "Welcome to {{.ProjectName}} API".to_string(),
        version: "1.0.0".to_string(),
    }))
}

#[actix_web::main]
async fn main() -> std::io::Result<()> {
    env_logger::init();

    log::info!("Starting {{.ProjectName}} server on port 8080");

    HttpServer::new(|| {
        let cors = Cors::default()
            .allow_any_origin()
            .allow_any_method()
            .allow_any_header();

        App::new()
            .wrap(Logger::default())
            .wrap(cors)
            .route("/health", web::get().to(health))
            .service(
                web::scope("/api/v1")
                    .route("", web::get().to(api_root))
            )
    })
    .bind("127.0.0.1:8080")?
    .run()
    .await
}
