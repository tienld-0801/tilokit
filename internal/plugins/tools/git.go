package tools

import (
	"path/filepath"
	"time"

	"github.com/go-git/go-git/v5"
	"github.com/go-git/go-git/v5/plumbing/object"
	"github.com/pkg/errors"
	tilocontext "github.com/ti-lo/tilokit/internal/core/context"
	"github.com/ti-lo/tilokit/internal/utils"
)

// GitPlugin implements Git integration
type GitPlugin struct{}

// NewGitPlugin creates a new Git plugin instance
func NewGitPlugin() *GitPlugin {
	return &GitPlugin{}
}

func (p *GitPlugin) Name() string {
	return "git-integration"
}

func (p *GitPlugin) Version() string {
	return "1.0.0"
}

func (p *GitPlugin) Description() string {
	return "Git repository initialization and configuration"
}

func (p *GitPlugin) SupportedFrameworks() []string {
	return []string{"*"} // Support all frameworks
}

func (p *GitPlugin) SupportedBuildTools() []string {
	return []string{"*"} // Support all build tools
}

func (p *GitPlugin) PreGenerate(ctx *tilocontext.ExecutionContext) error {
	// Check if git should be initialized
	if !ctx.Config.GitInit {
		return nil
	}

	// Check if git is available
	if !p.isGitAvailable() {
		utils.Warning("Git is not available, skipping git initialization")
		ctx.Config.GitInit = false
	}

	return nil
}

func (p *GitPlugin) Generate(ctx *tilocontext.ExecutionContext) error {
	if !ctx.Config.GitInit {
		return nil
	}

	// Initialize git repository
	if err := p.initGitRepo(ctx); err != nil {
		return errors.Wrap(err, "failed to initialize git repository")
	}

	// Create .gitignore
	if err := p.createGitignore(ctx); err != nil {
		return errors.Wrap(err, "failed to create .gitignore")
	}

	// Create initial commit
	if err := p.createInitialCommit(ctx); err != nil {
		utils.Warning("Failed to create initial commit: %v", err)
		// Don't fail the entire process for this
	}

	return nil
}

func (p *GitPlugin) PostGenerate(ctx *tilocontext.ExecutionContext) error {
	if ctx.Config.GitInit {
		ctx.SetMetadata("git_initialized", true)
		utils.Success("Git repository initialized")
	}
	return nil
}

func (p *GitPlugin) isGitAvailable() bool {
	// Try to run git --version
	return utils.CommandExists("git")
}

func (p *GitPlugin) initGitRepo(ctx *tilocontext.ExecutionContext) error {
	_, err := git.PlainInit(ctx.ProjectPath, false)
	if err != nil {
		return errors.Wrap(err, "failed to initialize git repository")
	}

	utils.Info("Initialized git repository")
	return nil
}

func (p *GitPlugin) createGitignore(ctx *tilocontext.ExecutionContext) error {
	gitignoreContent := p.generateGitignore(ctx)
	gitignorePath := filepath.Join(ctx.ProjectPath, ".gitignore")

	return utils.WriteFile(gitignorePath, gitignoreContent)
}

func (p *GitPlugin) generateGitignore(ctx *tilocontext.ExecutionContext) string {
	framework := ctx.Config.Framework
	buildTool := ctx.Config.BuildTool

	gitignore := `# Dependencies
node_modules/
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Coverage directory used by tools like istanbul
coverage/
*.lcov

# nyc test coverage
.nyc_output

# Grunt intermediate storage
.grunt

# Bower dependency directory
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons
build/Release

# Dependency directories
jspm_packages/

# TypeScript cache
*.tsbuildinfo

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variables file
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# parcel-bundler cache
.cache
.parcel-cache

# Next.js build output
.next
out/

# Nuxt.js build / generate output
.nuxt
dist/

# Gatsby files
.cache/
public

# Storybook build outputs
.out
.storybook-out

# Temporary folders
tmp/
temp/

# Logs
logs
*.log

# Runtime data
pids
*.pid
*.seed

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1 declaration files
typings/

# Optional npm cache directory
.npm

# Optional eslint cache
.eslintcache

# Optional REPL history
.node_repl_history

# Output of 'npm pack'
*.tgz

# Yarn Integrity file
.yarn-integrity

# dotenv environment variable files
.env

# parcel-bundler cache (https://parceljs.org/)
.cache
.parcel-cache

# next.js build output
.next

# nuxt.js build output
.nuxt

# vuepress build output
.vuepress/dist

# Serverless directories
.serverless

# FuseBox cache
.fusebox/

# DynamoDB Local files
.dynamodb/

# IDE
.vscode/
.idea/
*.swp
*.swo
*~

# OS
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
`

	// Add framework-specific ignores
	switch framework {
	case "react":
		gitignore += `
# React specific
build/
`
	case "vue":
		gitignore += `
# Vue specific
dist/
`
	case "angular":
		gitignore += `
# Angular specific
dist/
tmp/
out-tsc/
bazel-out
`
	}

	// Add build tool specific ignores
	switch buildTool {
	case "vite":
		gitignore += `
# Vite
dist-ssr
*.local
`
	case "webpack":
		gitignore += `
# Webpack
dist/
`
	}

	return gitignore
}

func (p *GitPlugin) createInitialCommit(ctx *tilocontext.ExecutionContext) error {
	repo, err := git.PlainOpen(ctx.ProjectPath)
	if err != nil {
		return errors.Wrap(err, "failed to open git repository")
	}

	worktree, err := repo.Worktree()
	if err != nil {
		return errors.Wrap(err, "failed to get worktree")
	}

	// Add all files
	_, err = worktree.Add(".")
	if err != nil {
		return errors.Wrap(err, "failed to add files to git")
	}

	// Create commit
	_, err = worktree.Commit("Initial commit", &git.CommitOptions{
		Author: &object.Signature{
			Name:  "TiLoKit",
			Email: "tilokit@example.com",
			When:  time.Now(),
		},
	})
	if err != nil {
		return errors.Wrap(err, "failed to create initial commit")
	}

	utils.Success("Created initial commit")
	return nil
}
